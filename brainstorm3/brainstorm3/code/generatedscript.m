function generatedscript(tutorial_dir)
% TUTORIAL_YOKOGAWA: Script that reproduces the results of the online tutorials "Yokogawa recordings".
%
% CORRESPONDING ONLINE TUTORIALS:
%     https://neuroimage.usc.edu/brainstorm/Tutorials/Yokogawa
%
% INPUTS: 
%     tutorial_dir: Directory where the sample_yokogawa.zip file has been unzipped

% @=============================================================================
% This function is part of the Brainstorm software:
% https://neuroimage.usc.edu/brainstorm
%  fichier 
% Copyright (c)2000-2020 University of Southern California & McGill University
% This software is distributed under the terms of the GNU General Public License
% as published by the Free Software Foundation. Further details on the GPLv3
% license can be found at http://www.gnu.org/copyleft/gpl.html.
% 
% FOR RESEARCH PURPOSES ONLY. THE SOFTWARE IS PROVIDED "AS IS," AND THE
% UNIVERSITY OF SOUTHERN CALIFORNIA AND ITS COLLABORATORS DO NOT MAKE ANY
% WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
% MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, NOR DO THEY ASSUME ANY
% LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS SOFTWARE.
%
% For more information type "brainstorm license" at command prompt.
% =============================================================================@
%
% Author: Francois Tadel, 2014-2016


% ======= FILES TO IMPORT =======
% You have to specify the folder in which the tutorial dataset is unzipped
if (nargin == 0) || isempty(tutorial_dir) || ~file_exist(tutorial_dir)
    error('The first argument must be the full path to the tutorial dataset folder.');
end
% Build the path of the files to import
AnatDir = fullfile(tutorial_dir, 'sample_epilepsy', 'anatomy', 'mri');
RawFile = fullfile(tutorial_dir, 'sample_epilepsy', 'data', 'tutorial_eeg.bin');
ElcFile = fullfile(tutorial_dir, 'sample_epilepsy', 'data', 'tutorial_electrodes.elc');


% Check if the folder contains the required files
if ~file_exist(RawFile)
    error(['The folder ' tutorial_dir ' does not contain the folder from the file sample_yokogawa.zip.']);
end

% ======= CREATE PROTOCOL =======
% The protocol name has to be a valid folder name (no spaces, no weird characters...)
ProtocolName = 'TutorialEpilepsy';
% Start brainstorm without the GUI
if ~brainstorm('status')
    brainstorm nogui
end
% Delete existing protocol
gui_brainstorm('DeleteProtocol', ProtocolName);
% Create new protocol
gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);
% Start a new report
bst_report('Start');


% ===== IMPORT ANATOMY =====
% Subject name
SubjectName = 'Subject01';
% Process: Import anatomy folder
bst_process('CallProcess', 'process_import_anatomy', [], [], ...
    'subjectname', SubjectName, ...
    'mrifile',     {AnatDir, 'FreeSurfer'}, ...
    'nvertices',   15000, ...
    'nas', [128, 227,  93], ...
    'lpa', [ 48, 130,  69], ...
    'rpa', [214, 130,  76]);




% ===== ACCESS RECORDINGS =====

% Process: Create link to raw file
sFiles = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
    'subjectname',    SubjectName, ...
    'datafile',       {RawFile,'EEG-DELTAMED'} , ...
    'channelreplace', 0, ...
    'channelalign',   0);

% Process: ADD EEG positions
    
sFiles=bst_process('CallProcess', 'process_channel_addloc', sFiles, [], ...
     'channelfile', {ElcFile, 'XENSOR'}, ...
      'usedefault',  1, ...
      'fixunits',    1, ...
        'vox2ras',     0);
   
% Start a new report
bst_report('Start', sFiles);     
    
%show MRI registratiopn with label and electrodes positions related to the
%head
    
% Process: Refine registration
sFiles = bst_process('CallProcess', 'process_headpoints_refine', sFiles, []);

% Process: Project electrodes on scalp
sFiles = bst_process('CallProcess', 'process_channel_project', sFiles, [], ...
    'sensortypes', 'EEG');

% display sensors image 

%DISPLAY THE RECORDINGS + COMPARE 

% Process: Detect heartbeats
sFiles = bst_process('CallProcess', 'process_evt_detect_ecg', sFiles, [], ...
    'channelname', 'ECG', ...
    'timewindow',  [], ...
    'eventname',   'cardiac');

% Process: Import from file

SpikeFiles = {...
    '/udd/nforde/Nina/Stage/sample_epilepsy/data/tutorial_spikes.txt'};
 
sFiles = bst_process('CallProcess', 'process_evt_import', sFiles, [], ...
    'evtfile', {SpikeFiles{1}, 'ARRAY-TIMES'}, ...
    'evtname', 'SPIKE', ...
    'delete',  0);

% Process: Band-pass:0.5Hz-80Hz
sFiles = bst_process('CallProcess', 'process_bandpass', sFiles, [], ...
    'sensortypes', 'EEG', ...
    'highpass',    0.5, ...
    'lowpass',     80, ...
    'tranband',    0, ...
    'attenuation', 'strict', ...  % 60dB
    'ver',         '2019', ...  % 2019
    'mirror',      0, ...
    'read_all',    0);
% Process: Power spectrum density (Welch)
s_psd = bst_process('CallProcess', 'process_psd', sFiles, [], ...
    'timewindow',  [0, 3599.996094], ...
    'win_length',  10, ...
    'win_overlap', 50, ...
    'units',       'physical', ...  % Physical: U2/Hz
    'sensortypes', 'EEG', ...
    'win_std',     0, ...
    'edit',        struct(...
         'Comment',         'Power', ...
         'TimeBands',       [], ...
         'Freqs',           [], ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0));


% Process: Re-reference EEG
sFiles = bst_process('CallProcess', 'process_eegref', sFiles, [], ...
    'eegref',      'AVERAGE', ...
    'sensortypes', 'EEG');

% Process: ICA components: Infomax
sFiles = bst_process('CallProcess', 'process_ica', sFiles, [], ...
    'timewindow',   [0, 3599.996094], ...
    'eventname',    '', ...
    'eventtime',    [-0.2, 0.2], ...
    'resample',     0, ...
    'bandpass',     [0, 0], ...
    'nicacomp',     24, ...
    'sensortypes',  'EEG', ...
    'icasort',      'EOG, ECG', ...
    'usessp',       1, ...
    'ignorebad',    1, ...
    'saveerp',      0, ...
    'method',       1);  % Infomax:    EEGLAB / RunICA

% Process: Power spectrum density (Welch)
sFiles = bst_process('CallProcess', 'process_psd', sFiles, [], ...
    'timewindow',  [0, 3599.996094], ...
    'win_length',  10, ...
    'win_overlap', 50, ...
    'units',       'physical', ...  % Physical: U2/Hz
    'sensortypes', 'EEG', ...
    'win_std',     0, ...
    'edit',        struct(...
         'Comment',         'Power', ...
         'TimeBands',       [], ...
         'Freqs',           [], ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0));



% Save and display report
ReportFile = bst_report('Save', sFiles);
bst_report('Open', ReportFile);
% bst_report('Export', ReportFile, ExportDir);

